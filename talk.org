Everyone has a 1h slot, apparently, so that's about 45min for the talk
plus 15min for questions.

There are 5minutes in the plan below, but I suspect that the XEmacs and
post-XEmacs period could be cut down significantly, and or partly merged
into the previous parts

* Stefan

** Background              10min

*** Emacs                   8min
- TECO Emacs => Multics Emacs => Gosling Emacs => GNU Emacs
- ELisp designed as the implementation language of Emacs
- Free Software philosophy embodied in the design
- Development model
  - During TECO Emacs => early GNU Emacs
  - Around Emacs-19 (schism and such)
  - in XEmacs
  - in Emacsâ‰¥21

*** Early language design   2min
- maclisp
- mocklisp

** Base ELisp              10min

*** "Normal" language       5min
- scoping
- macros
- absence of records/structs/...
- non-local exits

*** Emacs-specific          5min
- hooks
- docstrings
- interactive functions
- strings
- buffer-local vars
- I/O

** Implementation          10min
*** code
- byte-code
- bootstrap
- debugging
- profiling
- jit
- tail calls
*** data
- overview
- stack scanning
- tag bits
- vectors
- weak pointers
- incremental GC
- dumping

** XEmacs period           10min
- events&keymaps
- characters
- ffi
- aliases
- unicode
- bignums
- specifiers
- performance improvements
- Custom

** post-XEmacs             10min
- lexical scoping
- cl-lib
- pattern matching
- gv
- OO
- generators
- concurrency
- inline functions
- modules or lack thereof

** Conclusion               5min
- macros allow "wild" experimentation and domain-specific extensions
- simple core, with conservative evolution

* Mike

Issues:

- When to do "Stefan = Emacs, Mike = XEmacs"?
- How much of the Emacs vs. XEmacs history?
- Where to put free software ideals?

** Steele + Stallman: TECO => Emacs keybindings

Reenact the original scene.

** Lisp overview

Come from TECO language.

Then have a conversation.

"Obscure PL" vs. Scheme (academic) / Lua (didn't exist) / Python
(didn't exist) / Tcl (didn't exist) / JavaScript (haha)

** Dynamic binding: What is it good for?

Stefan can show what dynamic binding is good for.

Mike's a Schemer, so likes static binding -> early work in XEmacs.

Stefan: "So where is it now?"

Mike: "Research!"

Stefan: "Static scoping in Emacs implemented."

Mike: "Boring! What do you do for a day job?"

** Macros


** XEmacs vs. Emacs

Mike: It's 1990, Emacs is dead. ...

Mike: "We did this 20 years ago."
Stefan: "But look where we got without it."

- opaque datatypes
- portable dumper
- incremental GC vs. "we turn off the message"

** What's Next

"But isn't Emacs dead, given how old it is?"

Stefan can tell the native-codee story, Mike can complain.



